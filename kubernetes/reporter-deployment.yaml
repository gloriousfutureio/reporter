apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.prod.yaml
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: reporter
  name: reporter
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: reporter
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.prod.yaml
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.network/redis-net: "true"
        io.kompose.service: reporter
    spec:
      containers:
      - env:
        - name: GITHUB_TOKEN
          valueFrom:
            configMapKeyRef:
              key: GITHUB_TOKEN
              name: env
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              key: REDIS_HOST
              name: env
        - name: REDIS_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: REDIS_PASSWORD
              name: env
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              key: REDIS_PORT
              name: env
        - name: ZENHUB_TOKEN
          valueFrom:
            configMapKeyRef:
              key: ZENHUB_TOKEN
              name: env
        image: docker.greymatter.io/internal/reporter
        imagePullPolicy: ""
        name: reporter
        ports:
        - containerPort: 3000
        resources: {}
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
status: {}
